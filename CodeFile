import math

allnodes = {}

# function to calculate distance between two points in a map
def distance_calculator(origin, dest, allnodes):
    point_a = allnodes[origin]
    point_b = allnodes[dest]   
    return((((point_a[1] - point_b[1])**2) + ((point_a[0] - point_b[0])**2))**0.5)

def shortest_path(M,start,goal):
    # initial set and dictionary declaration
    adjoining = list()
    pathcost = {}
    heuristic = {}
    frontier = set()
    explored = set()
    pathtobetraversed = set()
    minimumpath = {}
    costofpath = {}
    interim_costofpath = {}
    prevpathcost = 0
    
    # to get all nodes in the map
    allnodes = M.intersections
       
    # working on the three parameters of search problem; frontier, explored and unexplored
    frontier.add(start)
    pathtobetraversed.add(start)
    explored.add(start)
    prevnode = start
    currentnode = start
    
    # starting off from the start node
    # all nodes connected to start node shall be appended to the explored node list
    while(len(explored)):
        adjoining  = M.roads[start]
        print("Adjoining nodes", adjoining)
        
    # add the adjoining nodes to explored set if adjoining nodes is not explored
        for l in range(len(adjoining)):
            if(adjoining[l]) in explored:
                # the neighbor node is already reached, ignore this node
            else:
                explored.add(adjoining[l])
                
        print("Explored list after neighbor nodes checked", explored)
        
        # the cost of path traversed so far
        prevpathcost = distance_calculator(currentnode, prevnode, allnodes)
        print(" The cost of the path traversed so far is ", prevpathcost)
                   
        for i in range(len(adjoining)):
            pathcost[adjoining[i]] = distance_calculator(current, adjoining[i], allnodes) + prevpathcost
            heuristic[adjoining[i]] = distance_calculator(adjoining[i], goal, allnodes)
            costofpath[adjoining[i]] = pathcost[adjoining[i]] + heuristic[adjoining[i]]
        
        nextnode = min(costofpath, key=costofpath.get) 
        interim_costofpath = costofpath
        
        print("Path cost", pathcost)
        print("Heuristic cost", heuristic)
        print("Cost of paths", costofpath)
        print("Explored list", explored)
        print("Next node", nextnode)
        print("Length of previous path", len(pathtobetraversed))
        print("Cost of interim path", interim_costofpath)
        
    # check if the minimum cost path is among the explored list already
#        for j in range(len(pathtobetraversed)):
#             if(nextnode == pathtobetraversed[j]):
#                 print("deleting an item 1")
#                 del interim_costofpath[pathtobetraversed[j]]
#                 nextnode = min(interim_costofpath, key=interim_costofpath.get) 

        for j in range(len(pathtobetraversed)):
            if(nextnode in pathtobetraversed):
                del interim_costofpath[nextnode]
                nextnode = min(interim_costofpath, key=interim_costofpath.get) 
                
        print(" Cost of interim path after deleting previous traversed nodes", interim_costofpath)
        #nextnode = min(interim_costofpath, key=interim_costofpath.get) 
                
    # updating the explored path
        for k in range(len(adjoining)):
            explored.add(adjoining[k])
            #frontier.append(adjoining[k])
        
        print("Explored list", explored)                
        pathtobetraversed.add(nextnode)
        print("Path to be traversed is", pathtobetraversed)
        
        # re-initializing the variables i, j, k
        i = 0
        j = 0
        k = 0
        prevnode = start
        start = nextnode
        print(" The previous node and the start node are", prevnode, start)
                
    print("shortest path called")
    return pathtobetraversed
